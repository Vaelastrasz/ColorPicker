namespace colorPickerFeature {

  
  var ui_colorPopup;
  var ui_preview;
  var ui_paliter;
  var ui_resetPreview;


  function self.ready() {
    ui_preview = $(.previewColor);
    ui_paliter = $(.colorsPaliter);
    ui_colorPopup = $(.selectColorPopup);
    ui_resetPreview = $(.resetColor);
    stdout.println("PREVIEW ATTACHED");
  }

  class Preview : Element {
    function attached() {
      self.on("colorChanged", function(evt){ui_preview.style#background-color = evt.data.color;});
      self.on("resetPreview", function(evt){ui_preview.style#background-color = ui_resetPreview.style#background-color;});
    }
  }

  class GeneralController {
    
    var m_blocks = [];
    var m_currentBlock;

    function resetPreview() {
      // ui_preview.style#background-color = ui_resetPreview.style#background-color;
      self.postEvent("resetPreview");
    }

    function setCurrentBlock(block) {
      m_currentBlock = block;
      self.postEvent("colorChanged", {color: block.color});
    }

    function getBlockByDOM(DOMElement) {
      var searchedBlock = m_blocks.find(:block: block.id == DOMElement.attributes["blockID"]);
      // stdout.println("Searched ID = " + DOMElement.attributes["blockID"]);
      // stdout.println("Found ID = " + searchedBlock.id);
      return searchedBlock;
    }

    function getBlockByID(searchID) {
      return m_blocks.find(:block: block.id == searchID);
    }

    function getIndexByID(searchID) {
      return m_blocks.indexOf(getBlockByID(searchID));
    }

    function generateId() {
      var id = "id" + Math.random().toString(16).slice(2);
      stdout.println(id);
      return id;
      // return 1; //change it back
    }

    function generateBlock(_color) {
      var blockElement = {
        id: generateId();
        color: _color;
      }
      stdout.println("Element generated! Id: " + blockElement.id);
      return blockElement;
    }

    function editBlock(id, newColor) {
      var blockToEdit = getBlockByID(id);
      blockToEdit.color = newColor;
      setCurrentBlock(blockToEdit);
    }
    
    function deleteBlock(id) {
      stdout.println("Starting to delete " + id);
      var indexToDelete = getIndexByID(id);
      m_blocks.splice(indexToDelete, 1);
      resetPreview();
      if (m_blocks.length > 0) {
        setCurrentBlock(m_blocks[m_blocks.length - 1]);
      } else {
        m_currentBlock = undefined;
      }
    }
  
    function updateUi() {
      if (removeAllBlocks() && addColorsToUI()) {
        stdout.println("Updating UI success!");
        return true;  
      }
      stdout.println("Updating UI error occured!");
      return false;
    }
    
    function addNewBlock(color) {
      var sampleBlock = "<div class=\"colorBlock colorControl\" />";
      var generatedBlock = generateBlock(color);

      ui_paliter.append(sampleBlock);
      ui_paliter[ui_paliter.length - 1].style#background-color = color;
      ui_paliter[ui_paliter.length - 1].attributes["blockID"] = generatedBlock.id;
      
      m_blocks.push(generatedBlock);
      stdout.println("Added block " + generatedBlock.id + " \nNew blockArray: " + m_blocks);
      setCurrentBlock(generatedBlock);
    }
    
    function removeAllBlocks() {
      var availableBlocks = $$(.colorControl);
      for (var i = 0; i < availableBlocks.length; i++) {
        availableBlocks[i].remove(); 
      }
      m_blocks = [];

      resetPreview();
      return true;
    }

    function addColorsToUI() {
      for (var block in m_blocks) {
        stdout.println(block);
        var blockToInsert = "<div class=\"colorBlock colorControl\" />";
        ui_paliter.append(blockToInsert);
        ui_paliter[ui_paliter.length - 1].attributes["blockID"] = block.id;
        ui_paliter[ui_paliter.length - 1].style#background-color = block.color; //CHANGE IT TO CSS SELECTOR [$(.colorControl[blockID=1])]

        setCurrentBlock(block);
      }
      return true;
    }

    function setBlockArray(colorArray) {
      removeAllBlocks();
      m_blocks = colorArray;
      addColorsToUI();
    }
  }

  class ColorPicker: Element {
    this var editBtn;
    this var deleteBtn;

    function attached() {
      this.editBtn = $(.editColor);
      this.deleteBtn = $(.deleteColor);
      this.onClick = onClick;
      // this.editBtn.onClick = editClick.bind(this);
      // this.deleteBtn.onClick = deleteClick.bind(this);
      this.editBtn.onClick = editClick;
      this.deleteBtn.onClick = deleteClick;
    }
    
    function onClick() {
      ui_colorPopup.attributes["type"] = "edit";
      this.popup(ui_colorPopup, 2);
      GeneralController.setCurrentBlock(GeneralController.getBlockByDOM(this));
    }

    function editClick() {
      var newColor = $(widget#color).value.toString();
      this.parent.owner.style#background-color = color(newColor); //fix
      GeneralController.editBlock(this.parent.owner.attributes["blockID"], newColor);
    }

    function deleteClick() {
      stdout.println(this);
      this.parent.owner.remove();
      GeneralController.deleteBlock(this.parent.owner.attributes["blockID"]);
    }

  }

  class ResetColor: Element {
    function attached() {
      this.onClick = onClick;
    }
    function onClick() {
      GeneralController.resetPreview();
    }
  }

  class SelectColor: Element {
    var addBtn;

    function attached() {
      this.onClick = onClick;
      addBtn = $(.addColor);
      addBtn.onClick = addClick;
    }

    function onClick() {
      ui_colorPopup.attributes["type"] = "add";
      this.popup(ui_colorPopup, 2);
    }

    function addClick() {
      var chosenColor = $(widget#color).value.toString();
      GeneralController.addNewBlock(chosenColor);      
      ui_colorPopup.closePopup();
    }
  }

  class ColorsPaliter: Element {

    const maxElementWidth = 550;
    function attached() {
      stdout.println("ColorsPaliter Attached");
      view.on("size", function() {
        ui_paliter.attributes["type"]  = (ui_paliter.box(#width) < maxElementWidth ? "mesh" : "row");
      });
    }
  }
}