namespace colorPickerFeature {

  
  var ui_colorPopup;
  var ui_preview;
  var ui_paliter;
  var ui_resetPreview;


  function self.ready() {
    ui_preview = $(.previewColor);
    ui_paliter = $(.colorsPaliter);
    ui_colorPopup = $(.selectColorPopup);
    ui_resetPreview = $(.resetColor);
    stdout.println("PREVIEW ATTACHED");
  }

  class GeneralController {
    var m_blocks = [];
    var _currentColor;
    property m_color(inputColor) {
      get {
        return _currentColor;
      } set {
        _currentColor = inputColor;
        ui_preview.style#background-color = _currentColor; //CHANGE IT TO EVENT
      }
    }

    function setCurrentColor(color) {
      m_color = color;
    }

    function generateId() {
      const id = `f${(+new Date).toString(16)}`;
      stdout.println(id);
      return id;
    }

    function generateBlock(_color, _isActive = false) {
      var blockElement = {
        id: generateId();
        color: _color;
        isActive: _isActive;
      }
      return blockElement;
    }
  
    function updateUi() {
      if (removeAllBlocks() && addColorsToUI()) {
        stdout.println("Updating UI success!");
        return true;  
      }
      stdout.println("Updating UI error occured!");
      return false;
    }
    
    function addNewBlock(color) {
      var sampleBlock = "<div class=\"colorBlock colorControl\" />";
      ui_paliter.append(sampleBlock);
      ui_paliter[ui_paliter.length - 1].style#background-color = color;
      
      var generatedBlock = generateBlock(color, true);
      // m_blocks.push(color);
      m_blocks.push(generatedBlock);
      setCurrentColor(color);
    }
    
    function removeBlock(blockId) {} //is find by color seems OK? 
                                   //have to implement ID!
    function editBlock(blockId) {}

    function removeAllBlocks() {
      var availableBlocks = $$(.colorControl);
      var i;
      for (i = 0; i < availableBlocks.length; i++) {
        availableBlocks[i].remove(); 
      }
      m_blocks = [];

      setCurrentColor(ui_resetPreview.style#background-color);
      return true;
    }

    function addColorsToUI() {
      for (var block in m_blocks) {
        stdout.println(block);
        var sampleBlock = "<div class=\"colorBlock colorControl\" />";
        ui_paliter.append(sampleBlock);
        ui_paliter[ui_paliter.length - 1].style#background-color = block;

        setCurrentColor(block);
      }
      return true;
    }

    function setBlockArray(colorArray) {
      removeAllBlocks();
      m_blocks = colorArray;
      addColorsToUI();
    }
  }

  class ColorPicker: Element {
    this var editBtn;
    this var deleteBtn;

    function attached() {
      this.editBtn = $(.editColor);
      this.deleteBtn = $(.deleteColor);
      this.onClick = onClick;
      editBtn.onClick = editClick.bind(this);
      deleteBtn.onClick = deleteClick.bind(this);
    }
    
    function onClick() {
      ui_colorPopup.attributes["type"] = "edit";
      this.popup(ui_colorPopup, 2);
      GeneralController.setCurrentColor(this.style#background-color);
    }

    function editClick() {
      var editedColor = $(widget#color).value.toString();
      this.style#background-color = color(editedColor); //fix
      GeneralController.setCurrentColor(editedColor);
    }

    function deleteClick() {
      stdout.println(this);
      this.remove(); 
      GeneralController.setCurrentColor(ui_paliter.first.style#background-color);
    }

    function detached(){}
  }

  class ResetColor: Element {
    function attached() {
      this.onClick = onClick;
    }
    function onClick() {
      GeneralController.setCurrentColor("black");
    }
  }

  class SelectColor: Element {
    var addBtn;

    function attached() {
      this.onClick = onClick;
      addBtn = $(.addColor);
      addBtn.onClick = addClick;
    }

    function onClick() {
      ui_colorPopup.attributes["type"] = "add";
      this.popup(ui_colorPopup, 2);
    }

    function addClick() {
      var chosenColor = $(widget#color).value.toString();
      GeneralController.addNewBlock(chosenColor);      
      ui_colorPopup.closePopup();
    }
  }

  class ColorsPaliter: Element {

    const maxElementWidth = 550;
    function attached() {
      stdout.println("ColorsPaliter Attached");
      view.on("size", function() {
        ui_paliter.attributes["type"]  = (ui_paliter.box(#width) < maxElementWidth ? "mesh" : "row");
      });
    }
  }
}