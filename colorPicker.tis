namespace colorPickerFeature {

  var colorBlocks = [];
  var colorPopup;
  var preview;
  var paliter;

  var _currentColor;
  property m_color(inputColor) {
    get {
      return _currentColor;
    } set {
      _currentColor = inputColor;
      preview.style#background-color = _currentColor; //CHANGE IT TO EVENT
    }
  }

  function self.ready() {
    preview = $(.previewColor);
    paliter = $(.colorsPaliter);
    colorPopup = $(.selectColorPopup); 
    stdout.println("PREVIEW ATTACHED");
  }

  class ColorPicker: Element {
    var editBtn;
    var deleteBtn;

    function attached() {
      this.onClick = onClick;
      editBtn = $(.editColor);
      deleteBtn = $(.deleteColor);
      stdout.println("edit:" + editBtn + " delete:" + deleteBtn);
    }
    
    function onClick() {
      colorPopup.attributes["type"] = "edit";
      this.popup(colorPopup, 2);
      m_color = this.style#background-color;
    }

    function detached(){}
  }

  class PreviewColor: Element {
    function attached() {}
  }

  class ResetColor: Element {
    function attached() {
      this.onClick = onClick;
    }
    function onClick() {
      m_color = "black";
    }
  }

  class EditColor: Element {
    function attached() {
      this.onClick = onClick;
    }
    function onClick() {
      var editedColor = $(widget#color).value.toString();
      this.parent.owner.style#background-color = color(editedColor);
      m_color = editedColor;
    }
  }

  class DeleteColor: Element {
    function attached() {
      this.onClick = onClick;
    }
    function onClick() {
      stdout.println(this.parent.owner);
      this.parent.owner.remove(); 
      m_color = paliter.first.style#background-color;
      //array work
    }
  }

  class SelectColor: Element {
    function attached() {
      this.onClick = onClick;
    }
    function onClick() {
      colorPopup.attributes["type"] = "add";
      $(.selectColor).popup(colorPopup, 2);
    }
  }

  class ColorsPaliter: Element {

    const maxElementWidth = 700;
    function attached() {
      stdout.println("ColorsPaliter Attached");
      view.on("size", function() {
        paliter.attributes["type"]  = (paliter.box(#width) < maxElementWidth ? "mesh" : "row");
      });
    }
  }

  class AddColor: Element {

    function attached() {
      this.onClick = onClick;
    }

    function onClick() {
      var chosenColor = $(widget#color).value.toString();
      var sampleBlock = "<div class=\"colorBlock colorControl\" />";
      
      paliter.append(sampleBlock);
      colorBlocks.push(chosenColor);

      paliter[paliter.length - 1].style#background-color = color(chosenColor);
      m_color = chosenColor;
      
      colorPopup.closePopup();
      return true; //stopPropagation()
    }
  }

}