namespace colorPickerFeature {

  //states, maybe wrap to class?
  var currentColor = "#000000";
  var colorBlocks = [];

  function setCurrentColor(color) {
    currentColor = color;
  }

  const preview = $(.previewColor) 
  //

  class ColorPicker: Element {

    function attached() {
      this.onClick = handleClick;
    }

    function detached(){}

	function handleClick(){
		$(.colorControl).popup($(.selectColorPopup));
	}
    function onMouse(evt) {}

  }

  class PreviewColor: Element {
    function attached() {
      // preview.style#background-color = currentColor;
      // preview.value = "";
      //TODO: think about saving to JSON and serialize it to file
      view.on("color")
    }
  }

  class RemoveColor: Element {
    function attached() {
      this.onClick = onClick;
    }
    function onClick() {
      preview.style#background-color = "#000000"
      currentColor = "#000000";
    }
  }

  class ColorsPaliter: Element {

    const maxElementWidth = 700;
    const paliter = $(.colorsPaliter);
    function attached() {
      stdout.println("ColorsPaliter Attached");
      view.on("size", function() {
        paliter.attributes["type"]  = (paliter.box(#width) < maxElementWidth ? "mesh" : "row");
      });
    }
  }
}