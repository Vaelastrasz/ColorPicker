namespace colorPickerFeature {

  var colorBlocks = [];
  var currentColor;
  var preview;
  var paliter;

  function self.ready() {
    preview = $(.previewColor);
    paliter = $(.colorsPaliter); 
    stdout.println("PREVIEW ATTACHED");
  }

  function setCurrentColor(color) {
    currentColor = color;
    preview.style#background-color = currentColor;
    stdout.println("COLOR SET TO" + currentColor);
  }

  class ColorPicker: Element {
    function attached() {
      this.onClick = onClick;
    }
    function onClick() {
      this.popup($(.editColorPopup), 2);
      setCurrentColor(this.style#background-color);
    }
    function detached(){}
  }

  class PreviewColor: Element {
    function attached() {}
  }

  class ResetColor: Element {
    function attached() {
      this.onClick = onClick;
    }
    function onClick() {
      preview.style#background-color = "#000000"
      currentColor = "#000000";
    }
  }

  class EditColor: Element {
    function attached() {
      this.onClick = onClick;
    }
    function onClick() {
      var editedColor = $(widget#color).value.toString();
      this.parent.owner.style#background-color = color(editedColor);
      setCurrentColor(editedColor);
    }
  }

  class DeleteColor: Element {
    function attached() {
      this.onClick = onClick;
    }
    function onClick() {
      stdout.println(this.parent.owner);
      this.parent.owner.remove();  //TODO: FIX THIS FCKING HACK
      setCurrentColor(paliter.first.style#background-color);
      //array work
    }
  }

  class SelectColor: Element {
    function attached() {
      this.onClick = onClick;
    }
    function onClick() {
      $(.selectColor).popup($(.selectColorPopup), 2);
    }
  }

  class ColorsPaliter: Element {

    const maxElementWidth = 700;
    function attached() {
      stdout.println("ColorsPaliter Attached");
      view.on("size", function() {
        paliter.attributes["type"]  = (paliter.box(#width) < maxElementWidth ? "mesh" : "row");
      });
    }
  }

  class AddColor: Element {

    function attached() {
      this.onClick = onClick;
    }

    function onClick() {
      var chosenColor = $(widget#color).value.toString();
      var sampleBlock = "<div class=\"colorBlock colorControl\" />";
      
      paliter.append(sampleBlock);
      colorBlocks.push(chosenColor);

      paliter[paliter.length - 1].style#background-color = color(chosenColor);
      setCurrentColor(chosenColor);
      
      $(.selectColorPopup).closePopup();
      return true; //stopPropagation()
    }
  }

}